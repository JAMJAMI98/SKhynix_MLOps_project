{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1vh-eHXLDW2-w2QhcwYjm36kouH_8uWra","timestamp":1714630150883},{"file_id":"11pObvxG2ai59Prw84T7owNHvXzUIdEEk","timestamp":1713935464772}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import sys\n","print(sys.version)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TTOo9Pit33SQ","executionInfo":{"status":"ok","timestamp":1715233384937,"user_tz":-540,"elapsed":683,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"f75e1876-1d60-45d6-8747-edf8eecc2ca1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\n"]}]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y1P0b4iuVkl2","executionInfo":{"status":"ok","timestamp":1716860076073,"user_tz":-540,"elapsed":47670,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"692fc234-6ade-49d3-f4a0-551d8016bcd9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Drive 마운트\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["#  파일 불러오기\n","1.   Full FDC data\n","2.   Alarm Data\n","\n"],"metadata":{"id":"XB1Uedrr1VVK"}},{"cell_type":"code","source":["# Full FDC Data 불러오기\n","import pandas as pd\n","from datetime import datetime\n","\n","def load_and_process_data(file_path):\n","   # CSV 파일 불러오기\n","    df1 = pd.read_csv(file_path, encoding='cp949')\n","\n","    # 날짜와 시간 데이터를 24시간제로 변환하는 함수\n","    def convert_to_24hr(date_str):\n","        # 오전/오후 문자를 AM/PM으로 변환\n","        date_str = date_str.replace(\"오전\", \"AM\").replace(\"오후\", \"PM\")\n","        # 24시간제 형식으로 변환\n","        date_obj = datetime.strptime(date_str, \"%Y-%m-%d %p %I:%M:%S\")\n","        # 변환된 객체를 문자열 형식으로 반환\n","        return date_obj.strftime(\"%Y-%m-%d %H:%M:%S\")\n","\n","    # 날짜 시간 열을 24시간제로 변환\n","    df1['start_dt_tm'] = df1['start_dt_tm'].apply(convert_to_24hr)\n","    df1['end_dt_tm'] = df1['end_dt_tm'].apply(convert_to_24hr)\n","\n","    # 'start_dt_tm' 열을 datetime64[ns]로 변환\n","    df1['start_dt_tm'] = pd.to_datetime(df1['start_dt_tm'])\n","    df1['end_dt_tm'] = pd.to_datetime(df1['end_dt_tm'])\n","\n","    return df1\n","\n","# 파일 경로 설정\n","file_path = '/content/drive/MyDrive/ASAC_4기_기업프로젝트_SK하이닉스/00.Data_set/ASAC_4기_Dataset_FDC_Summary_Fullset_22년PoC.csv'\n","# 데이터 처리 및 출력\n","df1_1 = load_and_process_data(file_path)\n","print(df1_1.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gnlVrXrLPMsP","executionInfo":{"status":"ok","timestamp":1716860184479,"user_tz":-540,"elapsed":108410,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"a9c0df3b-2efe-43ca-c63c-227d8ee8ae74"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["   WAFER_ID  PROD_CD  EQ_ID  OPER_ID  STEP_NM  PRMT_NM         start_dt_tm  \\\n","0      5454        7      1        3       28       10 2022-04-11 20:20:00   \n","1      4240        5      1        3       18        8 2022-06-26 19:06:57   \n","2      4963        6      1        4       24        8 2022-05-12 08:07:13   \n","3      4272        5      2        3       19       18 2022-06-27 05:46:53   \n","4      1681        2      1        3       19       16 2022-04-17 09:02:53   \n","\n","            end_dt_tm  max_val  min_val  ...  range_val  median_val  \\\n","0 2022-04-11 20:21:59      5.5      5.2  ...   0.299999    5.400000   \n","1 2022-06-26 19:06:58      NaN      NaN  ...        NaN   16.399999   \n","2 2022-05-12 08:07:52     17.9     17.8  ...   0.099999   17.900000   \n","3 2022-06-27 05:46:59    109.5    109.4  ...   0.099999  109.400000   \n","4 2022-04-17 09:02:59     85.1     84.9  ...   0.199999   84.900000   \n","\n","     area_val  slope_val     p05_val     p10_val     p90_val     p95_val  \\\n","0  637.129999   0.000169    5.300000    5.300000    5.400000    5.400000   \n","1   14.759999        NaN   16.399999   16.399999   16.399999   16.399999   \n","2  696.249999   0.002516   17.800000   17.800000   17.900000   17.900000   \n","3  656.500000   0.007142  109.400000  109.400000  109.440000  109.470000   \n","4  501.210000   0.035714   84.900000   84.900000   85.100000   85.100000   \n","\n","     mean_val  RCP_ID  \n","0    5.362831       4  \n","1         NaN       3  \n","2   17.854285       1  \n","3  109.400000       3  \n","4   84.900000       4  \n","\n","[5 rows x 21 columns]\n"]}]},{"cell_type":"code","source":["# Alarm Data 불러오기\n","from datetime import datetime\n","import pandas as pd\n","import numpy as np\n","\n","def load_and_convert_dates(file_path, date_columns):\n","    # CSV 파일 불러오기\n","    df2 = pd.read_csv(file_path, encoding='utf-16', sep='\\t')\n","\n","    # 날짜와 시간 데이터를 24시간제로 변환하는 내부 함수\n","    def convert_to_24hr(date_str):\n","        if pd.isna(date_str):\n","            # 입력 값이 NaN이라면, 그대로 반환\n","            return date_str\n","        # 오전/오후 문자를 AM/PM으로 변환\n","        date_str = date_str.replace(\"오전\", \"AM\").replace(\"오후\", \"PM\")\n","        # 24시간제 형식으로 변환\n","        date_obj = datetime.strptime(date_str, \"%Y-%m-%d %p %I:%M:%S\")\n","        # 변환된 객체를 문자열 형식으로 반환\n","        return date_obj.strftime(\"%Y-%m-%d %H:%M:%S\")\n","\n","    # 지정된 모든 날짜-시간 열을 변환\n","    for col in date_columns:\n","        df2[col] = df2[col].apply(convert_to_24hr)\n","        df2[col] = pd.to_datetime(df2[col])\n","\n","    return df2\n","\n","# 사용 예시\n","file_path = '/content/drive/MyDrive/ASAC_4기_기업프로젝트_SK하이닉스/00.Data_set/ASAC_4기_Dataset_Alarm_22년PoC.csv'\n","date_columns = ['Time', 'PUMP UP TIME']\n","df2_1 = load_and_convert_dates(file_path, date_columns)\n","print(df2_1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aWiEDURSVXKJ","executionInfo":{"status":"ok","timestamp":1716860184480,"user_tz":-540,"elapsed":11,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"6c9d0a87-f37d-4804-a34a-d02e91edd3d5"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["                   Time  EQ_ID PUMP_TYPE     기존 장착일자        PUMP UP TIME  \\\n","0   2022-07-30 06:07:18      2       DRY         NaN                 NaT   \n","1   2022-07-30 05:18:09      2       DRY         NaN                 NaT   \n","2   2022-07-27 23:21:06      2       DRY         NaN                 NaT   \n","3   2022-07-27 20:57:34      1       DRY         NaN                 NaT   \n","4   2022-07-27 18:36:19      2       DRY         NaN                 NaT   \n","..                  ...    ...       ...         ...                 ...   \n","122                 NaT      1       DRY  2022-03-15 2022-03-24 20:30:00   \n","123                 NaT      1       DRY  2022-01-07 2022-03-15 19:40:00   \n","124                 NaT      2       DRY  2022-03-07 2022-03-08 02:00:00   \n","125                 NaT      2       DRY  2022-01-21 2022-03-07 19:20:00   \n","126                 NaT      1   BOOSTER  2021-11-23 2022-02-24 07:00:00   \n","\n","          Origin of data  \n","0             Tool Alarm  \n","1             Tool Alarm  \n","2             Tool Alarm  \n","3             Tool Alarm  \n","4             Tool Alarm  \n","..                   ...  \n","122  Replacement History  \n","123  Replacement History  \n","124  Replacement History  \n","125  Replacement History  \n","126  Replacement History  \n","\n","[127 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","class DataSorter:\n","    def __init__(self, df):\n","        self.df = df\n","\n","    def eq_sort(self, eq_id):\n","        # EQ_ID가 주어진 값과 일치하는 행을 필터링\n","        filtered_df = self.df[self.df['EQ_ID'] == eq_id]\n","        # 'start_dt_tm'을 기준으로 데이터 정렬\n","        sorted_df = filtered_df.sort_values('start_dt_tm')\n","        return sorted_df\n","\n","    def sort_alarm(self, eq_id):\n","        # 특정 EQ_ID 값으로 필터링\n","        filtered_df = self.df[self.df['EQ_ID'] == eq_id]\n","        # Time 열을 기준으로 정렬\n","        sorted_df = filtered_df.sort_values('Time')\n","        # Time 열에서 결측값이 있는 행을 제거\n","        cleaned_df = sorted_df.dropna(subset=['Time'])\n","        # 결과로 반환할 열만 선택 (Time=Tool Alarm시간만 불러오기)\n","        return cleaned_df[['Time']]\n","\n","    def sort_replacement(self, eq_id, time_column='PUMP UP TIME'):\n","        # 특정 EQ_ID 값으로 필터링\n","        filtered_df = self.df[self.df['EQ_ID'] == eq_id]\n","        # 지정된 열을 기준으로 정렬\n","        sorted_df = filtered_df.sort_values(time_column)\n","        # 지정된 열에서 결측값이 있는 행을 제거\n","        cleaned_df = sorted_df.dropna(subset=[time_column])\n","        # 결과로 반환할 열만 선택\n","        return cleaned_df[[time_column]]\n","\n","# Example usage\n","df1 = df1_1\n","df2 = df2_1\n","\n","data_sorter1 = DataSorter(df1)\n","sorted_eq1 = data_sorter1.eq_sort(1)\n","print(sorted_eq1)\n","\n","data_sorter2 = DataSorter(df2)\n","sorted_alarms = data_sorter2.sort_alarm(1)\n","print(sorted_alarms)\n","\n","sorted_replacements = data_sorter2.sort_replacement(1)\n","print(sorted_replacements)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DSAG4sE4a1rS","executionInfo":{"status":"ok","timestamp":1716860185777,"user_tz":-540,"elapsed":1304,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"501e50d7-09da-47b3-eead-6744fd733351"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["         WAFER_ID  PROD_CD  EQ_ID  OPER_ID  STEP_NM  PRMT_NM  \\\n","2347987      4395        6      1        3       36       14   \n","2308120      4395        6      1        3       36       18   \n","2343813      4395        6      1        3       36        6   \n","2208238      4395        6      1        3       36       10   \n","2208054      4395        6      1        3       36       16   \n","...           ...      ...    ...      ...      ...      ...   \n","2035136       136        9      1        1       35       10   \n","1856321       136        9      1        1       35       17   \n","836285        136        9      1        1       35       14   \n","252482        136        9      1        1       35        4   \n","1248270       136        9      1        1       35        2   \n","\n","                start_dt_tm           end_dt_tm     max_val     min_val  ...  \\\n","2347987 2022-04-04 23:09:12 2022-04-05 00:14:37    1.020000    1.010000  ...   \n","2308120 2022-04-04 23:09:12 2022-04-05 00:14:37  112.200000  111.000000  ...   \n","2343813 2022-04-04 23:09:12 2022-04-05 00:14:37    0.052794    0.002266  ...   \n","2208238 2022-04-04 23:09:12 2022-04-05 00:14:37    4.700000    4.300000  ...   \n","2208054 2022-04-04 23:09:12 2022-04-05 00:14:37   85.300000   84.900000  ...   \n","...                     ...                 ...         ...         ...  ...   \n","2035136 2022-07-04 04:50:38 2022-07-04 04:53:21    5.400000    4.600000  ...   \n","1856321 2022-07-04 04:50:38 2022-07-04 04:53:21   85.100000   84.700000  ...   \n","836285  2022-07-04 04:50:38 2022-07-04 04:53:21    1.000000    1.000000  ...   \n","252482  2022-07-04 04:50:38 2022-07-04 04:53:21   34.965000   34.965000  ...   \n","1248270 2022-07-04 04:50:38 2022-07-04 04:53:21   35.000000   35.000000  ...   \n","\n","         range_val  median_val       area_val  slope_val    p05_val  \\\n","2347987   0.010000    1.020000    3996.965000   0.000016    1.01000   \n","2308120   1.200000  111.400000  438225.049999  -0.005306  111.10000   \n","2343813   0.050527    0.019916     110.016172   0.000326    0.00244   \n","2208238   0.400000    4.500000   17661.460000   0.002069    4.34000   \n","2208054   0.399999   85.100000  334284.699999   0.005683   84.90000   \n","...            ...         ...            ...        ...        ...   \n","2035136   0.800000    4.700000     786.460000  -0.000210    4.60000   \n","1856321   0.399999   84.800000   13828.505000  -0.001654   84.80000   \n","836285    0.000000    1.000000     163.000000   0.000000    1.00000   \n","252482    0.000000   34.965000    5699.295000   0.000000   34.96500   \n","1248270   0.000000   35.000000    5705.000000   0.000000   35.00000   \n","\n","            p10_val     p90_val     p95_val    mean_val  RCP_ID  \n","2347987    1.010000    1.020000    1.020000    1.015681       4  \n","2308120  111.100000  112.100000  112.100000  111.561363       4  \n","2343813    0.002616    0.050617    0.051735    0.022226       4  \n","2208238    4.400000    4.620000    4.700000    4.474999       4  \n","2208054   85.100000   85.300000   85.300000   85.147727       4  \n","...             ...         ...         ...         ...     ...  \n","2035136    4.600000    4.900000    5.000000    4.716831       7  \n","1856321   84.800000   84.900000   85.100000   84.853465       7  \n","836285     1.000000    1.000000    1.000000    1.000000       7  \n","252482    34.965000   34.965000   34.965000   34.965000       7  \n","1248270   35.000000   35.000000   35.000000   35.000000       7  \n","\n","[1158088 rows x 21 columns]\n","                  Time\n","94 2022-04-13 10:21:24\n","89 2022-04-22 16:38:35\n","87 2022-04-23 20:27:57\n","83 2022-04-26 16:17:27\n","78 2022-04-29 22:12:14\n","76 2022-04-30 19:52:08\n","74 2022-05-01 21:27:01\n","66 2022-05-09 11:52:05\n","64 2022-05-11 04:50:47\n","63 2022-05-11 21:09:10\n","62 2022-05-14 05:02:07\n","56 2022-05-20 16:42:50\n","54 2022-05-22 05:14:12\n","53 2022-05-23 06:57:27\n","38 2022-06-04 00:42:57\n","36 2022-06-07 21:30:13\n","32 2022-06-09 04:27:18\n","29 2022-06-15 07:07:21\n","28 2022-06-21 05:57:19\n","27 2022-06-22 03:31:10\n","26 2022-06-22 12:33:05\n","25 2022-06-27 09:00:00\n","22 2022-07-01 17:31:19\n","21 2022-07-02 00:37:49\n","20 2022-07-02 13:41:02\n","19 2022-07-04 02:23:49\n","12 2022-07-16 10:51:27\n","9  2022-07-16 21:25:57\n","3  2022-07-27 20:57:34\n","           PUMP UP TIME\n","126 2022-02-24 07:00:00\n","123 2022-03-15 19:40:00\n","122 2022-03-24 20:30:00\n","121 2022-03-26 07:29:00\n","118 2022-04-13 20:20:00\n","117 2022-04-14 04:00:00\n","116 2022-04-24 01:30:00\n","111 2022-05-14 12:00:00\n","107 2022-05-23 13:30:00\n","108 2022-05-23 13:30:00\n","102 2022-06-15 19:00:00\n","101 2022-06-22 17:50:00\n","100 2022-07-03 12:00:00\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","class ClosestTimeMerger:\n","    def __init__(self, main_df, alarms_df, pump_up_df):\n","        self.main_df = main_df\n","        self.alarms_df = alarms_df\n","        self.pump_up_df = pump_up_df\n","\n","    def merge_close_alarms(self):\n","      main_time_col='start_dt_tm'\n","      alarm_time_col='Time'\n","      pump_time_col='PUMP UP TIME'\n","        # 'forward' 방향으로 가장 가까운 알람 시간 합병\n","      merged_forward = pd.merge_asof(self.main_df, self.alarms_df, left_on=main_time_col, right_on=alarm_time_col, direction='forward')\n","        # 'backward' 방향으로 가장 가까운 알람 시간 합병\n","      merged_result = pd.merge_asof(merged_forward, self.alarms_df, left_on=main_time_col, right_on=alarm_time_col, direction='backward', suffixes=('_after', '_before'))\n","        # 병합 결과에서 컬럼 이름 변경\n","      merged_result.rename(columns={f'{alarm_time_col}_after': 'TA_tm_after', f'{alarm_time_col}_before': 'TA_tm_before'}, inplace=True)\n","        # 'PUMP UP TIME' 열을 날짜/시간 타입으로 변환\n","      self.pump_up_df[pump_time_col] = pd.to_datetime(self.pump_up_df[pump_time_col])\n","        # 병합된 결과와 가장 가까운 PUMP UP TIME 병합\n","      final_merged = pd.merge_asof(merged_result, self.pump_up_df, left_on=main_time_col, right_on=pump_time_col, direction='backward')\n","        # 병합 결과에서 컬럼 이름 변경\n","      final_merged.rename(columns={pump_time_col: 'P_Time'}, inplace=True)\n","      return final_merged\n","\n","# 사용 예시\n","merger = ClosestTimeMerger(sorted_eq1,sorted_alarms,sorted_replacements)\n","merged_final = merger.merge_close_alarms()\n","print(merged_final)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HTlwAuLab6JD","executionInfo":{"status":"ok","timestamp":1716860186279,"user_tz":-540,"elapsed":506,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"eb071c94-2bac-4452-a834-c339cca0a833"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["         WAFER_ID  PROD_CD  EQ_ID  OPER_ID  STEP_NM  PRMT_NM  \\\n","0            4395        6      1        3       36       14   \n","1            4395        6      1        3       36       18   \n","2            4395        6      1        3       36        6   \n","3            4395        6      1        3       36       10   \n","4            4395        6      1        3       36       16   \n","...           ...      ...    ...      ...      ...      ...   \n","1158083       136        9      1        1       35       10   \n","1158084       136        9      1        1       35       17   \n","1158085       136        9      1        1       35       14   \n","1158086       136        9      1        1       35        4   \n","1158087       136        9      1        1       35        2   \n","\n","                start_dt_tm           end_dt_tm     max_val     min_val  ...  \\\n","0       2022-04-04 23:09:12 2022-04-05 00:14:37    1.020000    1.010000  ...   \n","1       2022-04-04 23:09:12 2022-04-05 00:14:37  112.200000  111.000000  ...   \n","2       2022-04-04 23:09:12 2022-04-05 00:14:37    0.052794    0.002266  ...   \n","3       2022-04-04 23:09:12 2022-04-05 00:14:37    4.700000    4.300000  ...   \n","4       2022-04-04 23:09:12 2022-04-05 00:14:37   85.300000   84.900000  ...   \n","...                     ...                 ...         ...         ...  ...   \n","1158083 2022-07-04 04:50:38 2022-07-04 04:53:21    5.400000    4.600000  ...   \n","1158084 2022-07-04 04:50:38 2022-07-04 04:53:21   85.100000   84.700000  ...   \n","1158085 2022-07-04 04:50:38 2022-07-04 04:53:21    1.000000    1.000000  ...   \n","1158086 2022-07-04 04:50:38 2022-07-04 04:53:21   34.965000   34.965000  ...   \n","1158087 2022-07-04 04:50:38 2022-07-04 04:53:21   35.000000   35.000000  ...   \n","\n","         slope_val    p05_val     p10_val     p90_val     p95_val    mean_val  \\\n","0         0.000016    1.01000    1.010000    1.020000    1.020000    1.015681   \n","1        -0.005306  111.10000  111.100000  112.100000  112.100000  111.561363   \n","2         0.000326    0.00244    0.002616    0.050617    0.051735    0.022226   \n","3         0.002069    4.34000    4.400000    4.620000    4.700000    4.474999   \n","4         0.005683   84.90000   85.100000   85.300000   85.300000   85.147727   \n","...            ...        ...         ...         ...         ...         ...   \n","1158083  -0.000210    4.60000    4.600000    4.900000    5.000000    4.716831   \n","1158084  -0.001654   84.80000   84.800000   84.900000   85.100000   84.853465   \n","1158085   0.000000    1.00000    1.000000    1.000000    1.000000    1.000000   \n","1158086   0.000000   34.96500   34.965000   34.965000   34.965000   34.965000   \n","1158087   0.000000   35.00000   35.000000   35.000000   35.000000   35.000000   \n","\n","         RCP_ID         TA_tm_after        TA_tm_before              P_Time  \n","0             4 2022-04-13 10:21:24                 NaT 2022-03-26 07:29:00  \n","1             4 2022-04-13 10:21:24                 NaT 2022-03-26 07:29:00  \n","2             4 2022-04-13 10:21:24                 NaT 2022-03-26 07:29:00  \n","3             4 2022-04-13 10:21:24                 NaT 2022-03-26 07:29:00  \n","4             4 2022-04-13 10:21:24                 NaT 2022-03-26 07:29:00  \n","...         ...                 ...                 ...                 ...  \n","1158083       7 2022-07-16 10:51:27 2022-07-04 02:23:49 2022-07-03 12:00:00  \n","1158084       7 2022-07-16 10:51:27 2022-07-04 02:23:49 2022-07-03 12:00:00  \n","1158085       7 2022-07-16 10:51:27 2022-07-04 02:23:49 2022-07-03 12:00:00  \n","1158086       7 2022-07-16 10:51:27 2022-07-04 02:23:49 2022-07-03 12:00:00  \n","1158087       7 2022-07-16 10:51:27 2022-07-04 02:23:49 2022-07-03 12:00:00  \n","\n","[1158088 rows x 24 columns]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","class DataPreprocessor:\n","    def __init__(self, dataframe):\n","        self.df = dataframe\n","\n","    def drop_na_rows(self, column_name):\n","       # 특정 열의 NA/NaN 값을 포함하는 행 제거\n","        self.df = self.df.dropna(subset=[column_name])\n","        return self.df\n","\n","    def select_and_sort_columns(self, columns):\n","       # 원하는 컬럼 선택 및 'start_dt_tm'으로 정렬\n","        self.df = self.df[columns]\n","        self.df.sort_values('start_dt_tm', inplace=True)\n","        self.df.reset_index(drop=True, inplace=True)\n","        return self.df\n","\n","    def fill_missing_values(self):\n","       # 지정된 열에 대해 결측치를 적절한 값으로 채우기\n","        if 'max_val' in self.df.columns and 'p95_val' in self.df.columns:\n","            self.df['max_val'].fillna(self.df['p95_val'], inplace=True)\n","        if 'min_val' in self.df.columns and 'p05_val' in self.df.columns:\n","            self.df['min_val'].fillna(self.df['p05_val'], inplace=True)\n","        if 'range_val' in self.df.columns and 'p95_val' in self.df.columns and 'p05_val' in self.df.columns:\n","            self.df['range_val'].fillna(self.df['p95_val'] - self.df['p05_val'], inplace=True)\n","\n","    def analyze_and_clean_data(self):\n","        # 결측치 분석 및 선택적인 행 제거\n","        # 각 컬럼별 결측치 개수 출력\n","        for col in ['max_val', 'min_val', 'range_val', 'mean_val', 'median_val', 'stddev_val', 'p05_val', 'p10_val', 'p90_val', 'p95_val']:\n","            print(f'{col} 결측치 개수는', self.df[col].isnull().sum())\n","\n","        # 'mean_val'과 'stddev_val'이 둘 다 NaN인 행의 개수 계산 및 출력\n","        na_both = self.df[self.df['mean_val'].isna() & self.df['stddev_val'].isna()]\n","        print('mean_val과 stddev_val이 둘 다 NaN인 행의 개수:', len(na_both))\n","\n","        # 'mean_val' 열에서 결측치를 포함하는 행을 제거\n","        self.df = self.df.dropna(subset=['mean_val'])\n","        return self.df\n","\n","    def create_pivot_table(self):\n","       # 피벗 테이블 생성 및 컬럼 이름 재구성\n","        pivot_df = self.df.pivot_table(\n","            index=[\n","                'WAFER_ID', 'PROD_CD', 'EQ_ID', 'OPER_ID', 'RCP_ID', 'STEP_NM',\n","                'TA_tm_before', 'start_dt_tm', 'end_dt_tm', 'TA_tm_after', 'P_Time'\n","            ],\n","            columns='PRMT_NM',\n","            values=['max_val', 'min_val', 'stddev_val', 'mean_val', 'range_val', 'median_val'],\n","            aggfunc='first'\n","        ).reset_index()\n","\n","        pivot_df.columns = [f'{val}_{prmt}' if prmt != '' else val for val, prmt in pivot_df.columns]\n","        return pivot_df\n","\n","    def full_preprocessing(self):\n","        self.drop_na_rows('TA_tm_before')\n","        columns_to_include = ['WAFER_ID', 'PROD_CD', 'EQ_ID', 'OPER_ID', 'RCP_ID', 'STEP_NM', 'PRMT_NM', 'TA_tm_before', 'start_dt_tm', 'end_dt_tm', 'TA_tm_after', 'P_Time', 'max_val', 'min_val', 'mean_val', 'stddev_val', 'range_val', 'median_val', 'p05_val', 'p10_val', 'p90_val', 'p95_val']\n","        self.select_and_sort_columns(columns_to_include)\n","        self.fill_missing_values()\n","        self.analyze_and_clean_data()\n","        return self.create_pivot_table()\n","\n","# 사용 예:\n","df_processor = DataPreprocessor(merged_final)\n","pivot_df = df_processor.full_preprocessing()\n","print(pivot_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KrMSFXcqXTP6","executionInfo":{"status":"ok","timestamp":1716860188995,"user_tz":-540,"elapsed":2719,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"f62910c6-bb1f-4af6-a1b1-800891cfbc58"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["max_val 결측치 개수는 0\n","min_val 결측치 개수는 0\n","range_val 결측치 개수는 0\n","mean_val 결측치 개수는 58653\n","median_val 결측치 개수는 0\n","stddev_val 결측치 개수는 53827\n","p05_val 결측치 개수는 0\n","p10_val 결측치 개수는 0\n","p90_val 결측치 개수는 0\n","p95_val 결측치 개수는 0\n","mean_val과 stddev_val이 둘 다 NaN인 행의 개수: 53827\n","       WAFER_ID  PROD_CD  EQ_ID  OPER_ID  RCP_ID  STEP_NM        TA_tm_before  \\\n","0             1        9      1        1       7        3 2022-04-26 16:17:27   \n","1             1        9      1        1       7        7 2022-04-26 16:17:27   \n","2             1        9      1        1       7       12 2022-04-26 16:17:27   \n","3             1        9      1        1       7       23 2022-04-26 16:17:27   \n","4             1        9      1        1       7       33 2022-04-26 16:17:27   \n","...         ...      ...    ...      ...     ...      ...                 ...   \n","50535      7923        8      1        4       1       28 2022-06-27 09:00:00   \n","50536      7923        8      1        4       1       34 2022-06-27 09:00:00   \n","50537      7923        8      1        4       1       36 2022-06-27 09:00:00   \n","50538      7923        8      1        4       1       36 2022-06-27 09:00:00   \n","50539      7923        8      1        4       1       38 2022-06-27 09:00:00   \n","\n","              start_dt_tm           end_dt_tm         TA_tm_after  ...  \\\n","0     2022-04-26 22:39:03 2022-04-26 22:42:13 2022-04-29 22:12:14  ...   \n","1     2022-04-26 22:40:00 2022-04-26 22:42:38 2022-04-29 22:12:14  ...   \n","2     2022-04-26 22:38:35 2022-04-26 22:41:43 2022-04-29 22:12:14  ...   \n","3     2022-04-26 22:38:53 2022-04-26 22:42:03 2022-04-29 22:12:14  ...   \n","4     2022-04-26 22:39:33 2022-04-26 22:39:54 2022-04-29 22:12:14  ...   \n","...                   ...                 ...                 ...  ...   \n","50535 2022-06-28 03:29:58 2022-06-28 03:31:57 2022-07-01 17:31:19  ...   \n","50536 2022-06-28 03:19:55 2022-06-28 03:20:14 2022-07-01 17:31:19  ...   \n","50537 2022-06-28 03:12:26 2022-06-28 03:33:35 2022-07-01 17:31:19  ...   \n","50538 2022-06-28 03:32:18 2022-06-28 03:32:53 2022-07-01 17:31:19  ...   \n","50539 2022-06-28 03:19:35 2022-06-28 03:19:54 2022-07-01 17:31:19  ...   \n","\n","      stddev_val_10  stddev_val_11  stddev_val_12  stddev_val_13  \\\n","0          0.141681       0.049259       0.072760       0.051449   \n","1          0.239791       0.249999       0.100000       0.049999   \n","2          0.050000       0.052704       0.105409       0.044095   \n","3          0.099836       0.132842       0.085558       0.042779   \n","4          0.197084       0.175544       0.088852       0.036634   \n","...             ...            ...            ...            ...   \n","50535      0.052353       0.049332       0.050213       0.018173   \n","50536      0.185504       0.050163       0.042779       0.023570   \n","50537      0.150365       0.042814       0.024871       0.034136   \n","50538      0.043056       0.048873       0.050664       0.032703   \n","50539      0.176753       0.145071       0.032338       0.032338   \n","\n","       stddev_val_14  stddev_val_15  stddev_val_16  stddev_val_17  \\\n","0                0.0            0.0       0.066421       0.050729   \n","1                0.0            0.0       0.066666       0.044095   \n","2                0.0            0.0       0.105409       0.044095   \n","3                0.0            0.0       0.064676       0.038348   \n","4                0.0            0.0       0.000000       0.052314   \n","...              ...            ...            ...            ...   \n","50535            0.0            0.0       0.056537       0.103302   \n","50536            0.0            0.0       0.046088       0.032338   \n","50537            0.0            0.0       0.094454       0.225367   \n","50538            0.0            0.0       0.038695       0.050751   \n","50539            0.0            0.0       0.042779       0.100326   \n","\n","       stddev_val_18  stddev_val_19  \n","0           0.087447       0.226709  \n","1           0.105409       0.257120  \n","2           0.088191       0.176383  \n","3           0.097014       0.194784  \n","4           0.061558       0.000000  \n","...              ...            ...  \n","50535       0.162579       0.053799  \n","50536       0.102261       0.038348  \n","50537       0.741035       0.612507  \n","50538       0.000000       0.085749  \n","50539       0.048507       0.047140  \n","\n","[50540 rows x 125 columns]\n"]}]},{"cell_type":"markdown","source":["# **PRMT 1~4 PCA분석**"],"metadata":{"id":"5DUCdujQQaoP"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.decomposition import PCA\n","import re\n","\n","class DataPCAProcessor:\n","    def __init__(self, dataframe):\n","        self.df = dataframe\n","\n","    def apply_pca_to_val_columns(self, val_type):\n","        # PCA 인스턴스 생성\n","        pca = PCA(n_components=1)  # 1개의 주성분으로 축소\n","\n","        # 정규식 패턴으로 정확한 컬럼만 선택\n","        regex_pattern = rf\"{val_type}_[1-4]$\"\n","        val_columns = [col for col in self.df.columns if re.search(regex_pattern, col)]\n","\n","        # 결과를 저장할 DataFrame 생성\n","        pca_results = pd.DataFrame()\n","\n","        # 선택된 컬럼이 있는 경우에 PCA 적용\n","        if val_columns:\n","            data_subset = self.df[val_columns]  # 해당 컬럼 데이터 선택\n","            pca_result = pca.fit_transform(data_subset)  # PCA 적용\n","            pca_results[f\"{val_type}_pca\"] = pca_result[:, 0]  # PCA 결과 저장\n","            self.df = self.df.drop(columns=val_columns)  # 원본 DataFrame에서 선택된 컬럼 삭제\n","\n","        return pca_results\n","\n","    def process_data(self, val_types):\n","        for val_type in val_types:\n","            pca_result_df = self.apply_pca_to_val_columns(val_type)\n","            self.df = pd.concat([self.df, pca_result_df], axis=1)\n","        return self.df\n","\n","# 사용 예:\n","processor = DataPCAProcessor(pivot_df)\n","val_types = ['max_val', 'min_val', 'stddev_val', 'mean_val', 'range_val', 'median_val']  # PCA 적용할 값 유형 목록\n","processed_df = processor.process_data(val_types)\n","print(processed_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v3y5Ygtx28BV","executionInfo":{"status":"ok","timestamp":1716860191603,"user_tz":-540,"elapsed":2611,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"502a3d31-ba30-43e7-f2c5-e88a2ce16a7c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["       WAFER_ID  PROD_CD  EQ_ID  OPER_ID  RCP_ID  STEP_NM        TA_tm_before  \\\n","0             1        9      1        1       7        3 2022-04-26 16:17:27   \n","1             1        9      1        1       7        7 2022-04-26 16:17:27   \n","2             1        9      1        1       7       12 2022-04-26 16:17:27   \n","3             1        9      1        1       7       23 2022-04-26 16:17:27   \n","4             1        9      1        1       7       33 2022-04-26 16:17:27   \n","...         ...      ...    ...      ...     ...      ...                 ...   \n","50535      7923        8      1        4       1       28 2022-06-27 09:00:00   \n","50536      7923        8      1        4       1       34 2022-06-27 09:00:00   \n","50537      7923        8      1        4       1       36 2022-06-27 09:00:00   \n","50538      7923        8      1        4       1       36 2022-06-27 09:00:00   \n","50539      7923        8      1        4       1       38 2022-06-27 09:00:00   \n","\n","              start_dt_tm           end_dt_tm         TA_tm_after  ...  \\\n","0     2022-04-26 22:39:03 2022-04-26 22:42:13 2022-04-29 22:12:14  ...   \n","1     2022-04-26 22:40:00 2022-04-26 22:42:38 2022-04-29 22:12:14  ...   \n","2     2022-04-26 22:38:35 2022-04-26 22:41:43 2022-04-29 22:12:14  ...   \n","3     2022-04-26 22:38:53 2022-04-26 22:42:03 2022-04-29 22:12:14  ...   \n","4     2022-04-26 22:39:33 2022-04-26 22:39:54 2022-04-29 22:12:14  ...   \n","...                   ...                 ...                 ...  ...   \n","50535 2022-06-28 03:29:58 2022-06-28 03:31:57 2022-07-01 17:31:19  ...   \n","50536 2022-06-28 03:19:55 2022-06-28 03:20:14 2022-07-01 17:31:19  ...   \n","50537 2022-06-28 03:12:26 2022-06-28 03:33:35 2022-07-01 17:31:19  ...   \n","50538 2022-06-28 03:32:18 2022-06-28 03:32:53 2022-07-01 17:31:19  ...   \n","50539 2022-06-28 03:19:35 2022-06-28 03:19:54 2022-07-01 17:31:19  ...   \n","\n","      stddev_val_16  stddev_val_17  stddev_val_18  stddev_val_19  max_val_pca  \\\n","0          0.066421       0.050729       0.087447       0.226709   -12.835487   \n","1          0.066666       0.044095       0.105409       0.257120   -12.835487   \n","2          0.105409       0.044095       0.088191       0.176383   -27.513858   \n","3          0.064676       0.038348       0.097014       0.194784   -12.835487   \n","4          0.000000       0.052314       0.061558       0.000000     0.867981   \n","...             ...            ...            ...            ...          ...   \n","50535      0.056537       0.103302       0.162579       0.053799   -11.705414   \n","50536      0.046088       0.032338       0.102261       0.038348   -11.705414   \n","50537      0.094454       0.225367       0.741035       0.612507   -11.705414   \n","50538      0.038695       0.050751       0.000000       0.085749   -11.705414   \n","50539      0.042779       0.100326       0.048507       0.047140   -11.705414   \n","\n","       min_val_pca  stddev_val_pca  mean_val_pca  range_val_pca  \\\n","0        -8.297294       -1.447790    -10.263874      -4.461116   \n","1        -8.297294       -1.447790    -10.263874      -4.461116   \n","2       -27.799291        0.259739    -29.043208      -1.840154   \n","3        -8.297294       -1.447790    -10.263874      -4.461116   \n","4       -22.220338        7.455015     -1.228727      11.012399   \n","...            ...             ...           ...            ...   \n","50535    -7.237812       -1.447790     -9.166611      -4.461116   \n","50536    -7.237812       -1.447790     -9.166611      -4.461116   \n","50537   -27.042518        3.944501    -27.487723      15.486478   \n","50538    -7.237812       -1.447790     -9.166611      -4.461116   \n","50539    -7.237812       -1.447790     -9.166611      -4.461116   \n","\n","       median_val_pca  \n","0          -10.209835  \n","1          -10.209835  \n","2          -29.800688  \n","3          -10.209835  \n","4            2.745415  \n","...               ...  \n","50535       -9.111424  \n","50536       -9.111424  \n","50537      -29.016108  \n","50538       -9.111424  \n","50539       -9.111424  \n","\n","[50540 rows x 107 columns]\n"]}]},{"cell_type":"markdown","source":["# **DROP할 컬럼들**"],"metadata":{"id":"QsTop9MxckJI"}},{"cell_type":"code","source":["def filter_low_frequency_rows(df, column_name, threshold_ratio):\n","    # 각 값에 대한 빈도 계산 후 최빈값 빈도로 나누어 각 값의 비율 계산\n","    value_counts_ratio = df[column_name].value_counts() / df[column_name].value_counts().max()\n","\n","    # 비율이 threshold_ratio 이하인 값 필터링\n","    low_frequency_values = value_counts_ratio[value_counts_ratio <= threshold_ratio].index\n","\n","    # 낮은 비율 값을 출력\n","    print(f\"Low frequency values in {column_name} below {threshold_ratio} threshold: {low_frequency_values.tolist()}\")\n","\n","    # 이러한 값들을 가진 행들을 제거\n","    filtered_df = df[~df[column_name].isin(low_frequency_values)]\n","\n","    return filtered_df\n","\n","# 함수 호출 및 결과 확인\n","pivot_df_2 = filter_low_frequency_rows(processed_df, 'STEP_NM', 0.1)\n","print(pivot_df_2.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gedN6ZPos6mM","executionInfo":{"status":"ok","timestamp":1716860191604,"user_tz":-540,"elapsed":13,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"cf08eec9-35d7-44a1-c398-9ff544e552f0"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Low frequency values in STEP_NM below 0.1 threshold: [35, 29, 12, 37, 23, 3, 40, 33, 42, 7, 16, 14, 13, 5, 6, 18, 4, 31, 32, 1, 39, 22, 41]\n","(48672, 107)\n"]}]},{"cell_type":"markdown","source":["# **파생변수 생성**"],"metadata":{"id":"ArozLRq9e3QH"}},{"cell_type":"code","source":["import pandas as pd\n","\n","def process_data(df, time_diffs, sort_columns, group_columns, replacement_time_column, start_column):\n","    # rep_hour 먼저 계산 ('P_Time' 기준이라)\n","    df['rep_hours'] = (df[start_column] - df[replacement_time_column]).dt.total_seconds() / 3600\n","    df = df.sort_values(replacement_time_column)  # Sort by replacement time column if required\n","\n","    # 'start_dt_tm' 기준 파생변수 생성\n","    for new_col, start_col, end_col in time_diffs:\n","        df[new_col] = (df[end_col] - df[start_col]).dt.total_seconds() / 3600\n","\n","    # 정렬 기준 설정\n","    for sort_col, sort_order in sort_columns:\n","        df = df.sort_values(sort_col, ascending=sort_order)\n","\n","    # 조합 개수 세기\n","    for count_col, group_keys in group_columns:\n","        df[count_col] = df.groupby(group_keys).cumcount() + 1\n","\n","    return df\n","\n","# 사용예시\n","time_diffs = [\n","    ('diff_hours', 'start_dt_tm', 'TA_tm_after'),\n","    ('step_hours', 'start_dt_tm', 'end_dt_tm'),\n","    ('last_hours', 'TA_tm_before', 'start_dt_tm'),\n","]\n","sort_columns = [\n","    ('start_dt_tm', True),\n","]\n","group_columns = [\n","    ('Cumulative_Count_TA', ['TA_tm_before', 'RCP_ID', 'STEP_NM']),\n","    ('Cumulative_Count_P', ['P_Time', 'RCP_ID', 'STEP_NM'])\n","]\n","\n","processed_df = process_data(pivot_df_2, time_diffs, sort_columns, group_columns, 'P_Time', 'start_dt_tm')\n","print(processed_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JHoWXbVHGFAn","executionInfo":{"status":"ok","timestamp":1716860191604,"user_tz":-540,"elapsed":9,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"a5ee2e5a-d8d8-4b84-e080-c001bb094422"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["      WAFER_ID  PROD_CD  EQ_ID  OPER_ID  RCP_ID  STEP_NM        TA_tm_before  \\\n","321         23        9      1        2      13       36 2022-04-13 10:21:24   \n","323         23        9      1        2      13       38 2022-04-13 10:21:24   \n","320         23        9      1        2      13       34 2022-04-13 10:21:24   \n","317         23        9      1        2      13       26 2022-04-13 10:21:24   \n","309         23        9      1        2      13        2 2022-04-13 10:21:24   \n","...        ...      ...    ...      ...     ...      ...                 ...   \n","2193       137        9      1        1      24       28 2022-07-04 02:23:49   \n","2182       137        9      1        1      24        8 2022-07-04 02:23:49   \n","2192       137        9      1        1      24       27 2022-07-04 02:23:49   \n","2196       137        9      1        1      24       36 2022-07-04 02:23:49   \n","2176       136        9      1        1       7       36 2022-07-04 02:23:49   \n","\n","             start_dt_tm           end_dt_tm         TA_tm_after  ...  \\\n","321  2022-04-15 09:28:38 2022-04-26 21:27:14 2022-04-22 16:38:35  ...   \n","323  2022-04-15 09:28:54 2022-04-26 21:14:05 2022-04-22 16:38:35  ...   \n","320  2022-04-15 09:29:14 2022-04-26 21:14:25 2022-04-22 16:38:35  ...   \n","317  2022-04-15 09:29:34 2022-04-26 21:16:45 2022-04-22 16:38:35  ...   \n","309  2022-04-15 09:31:54 2022-04-26 21:17:08 2022-04-22 16:38:35  ...   \n","...                  ...                 ...                 ...  ...   \n","2193 2022-07-04 04:41:03 2022-07-04 04:42:02 2022-07-16 10:51:27  ...   \n","2182 2022-07-04 04:42:03 2022-07-04 04:42:12 2022-07-16 10:51:27  ...   \n","2192 2022-07-04 04:42:13 2022-07-04 04:42:22 2022-07-16 10:51:27  ...   \n","2196 2022-07-04 04:42:23 2022-07-04 04:42:57 2022-07-16 10:51:27  ...   \n","2176 2022-07-04 04:43:09 2022-07-04 04:49:03 2022-07-16 10:51:27  ...   \n","\n","     stddev_val_pca  mean_val_pca  range_val_pca  median_val_pca  rep_hours  \\\n","321        7.645696    -18.891565      15.159493      -20.005261  29.477222   \n","323       -1.447790    -10.263874      -4.419466      -10.209835  29.481667   \n","320       -1.447790    -10.263874      -4.461116      -10.209835  29.487222   \n","317       12.657200     14.228770      41.911171       14.120960  29.492778   \n","309        1.928402     18.132065       5.484382       18.363699  29.531667   \n","...             ...           ...            ...             ...        ...   \n","2193      32.986955     60.837164     111.609194       59.820338  16.684167   \n","2182      -1.447790    120.193839      -4.461116      120.271337  16.700833   \n","2192      -1.447790    120.193839      -4.461116      120.271337  16.703611   \n","2196      -1.447790    120.193839      -4.461116      120.271337  16.706389   \n","2176      -1.447790    -29.067864      -4.461116      -29.016108  16.719167   \n","\n","      diff_hours  step_hours  last_hours  Cumulative_Count_TA  \\\n","321   175.165833  275.976667   47.120556                    1   \n","323   175.161389  275.753056   47.125000                    1   \n","320   175.155833  275.753056   47.130556                    1   \n","317   175.150278  275.786389   47.136111                    1   \n","309   175.111389  275.753889   47.175000                    1   \n","...          ...         ...         ...                  ...   \n","2193  294.173333    0.016389    2.287222                    1   \n","2182  294.156667    0.002500    2.303889                    1   \n","2192  294.153889    0.002500    2.306667                    1   \n","2196  294.151111    0.009444    2.309444                    2   \n","2176  294.138333    0.098333    2.322222                    1   \n","\n","      Cumulative_Count_P  \n","321                    1  \n","323                    1  \n","320                    1  \n","317                    1  \n","309                    1  \n","...                  ...  \n","2193                   1  \n","2182                   1  \n","2192                   1  \n","2196                   2  \n","2176                   1  \n","\n","[48672 rows x 113 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-9-341b7ce9f124>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['rep_hours'] = (df[start_column] - df[replacement_time_column]).dt.total_seconds() / 3600\n"]}]},{"cell_type":"markdown","source":["## **원핫인코딩**"],"metadata":{"id":"yBgNe7y2XhmB"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import OneHotEncoder\n","\n","class DataProcessor:\n","    def __init__(self, df):\n","        self.df = df\n","\n","    def group_step_nm_values(self, mapping):\n","        # STEP_NM 열에 대한 값 매핑을 통해 그룹화\n","        for original, new in mapping.items():\n","            self.df.loc[self.df['STEP_NM'] == original, 'STEP_NM'] = new\n","        return self.df\n","\n","    def one_hot_encode_and_concat(self, column_name):\n","        # 지정된 열에 대해 원-핫 인코딩을 수행하고 결과를 DataFrame에 다시 병합\n","        # 인덱스를 재설정하여 정렬을 보장합니다\n","        self.df.reset_index(drop=True, inplace=True)\n","\n","        # OneHotEncoder 생성 및 적용\n","        ohe = OneHotEncoder(sparse=False)\n","        ohe_df = ohe.fit_transform(self.df[[column_name]])\n","\n","        # 원-핫 인코딩된 배열을 DataFrame으로 변환\n","        ohe_columns = [f\"{column_name}_{int(col)}\" for col in ohe.categories_[0]]\n","        ohe_df = pd.DataFrame(ohe_df, columns=ohe_columns)\n","\n","        # 원래 DataFrame과 원-핫 인코딩된 DataFrame 병합\n","        self.df = pd.concat([self.df, ohe_df], axis=1)\n","\n","        # 필요하다면 각 컬럼의 인덱스와 이름을 출력\n","        for index, column in enumerate(self.df.columns):\n","            print(f\"{index}: {column}\")\n","\n","        return self.df\n","\n","# 사용 예제\n","processor = DataProcessor(processed_df)\n","\n","# STEP_NM 값 그룹화\n","step_nm_mapping = {5: 6, 10: 11, 18: 19}\n","df = processor.group_step_nm_values(step_nm_mapping)\n","\n","# 원-핫 인코딩 수행\n","df = processor.one_hot_encode_and_concat('STEP_NM')\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XuHQc-8yHK81","executionInfo":{"status":"ok","timestamp":1716860192142,"user_tz":-540,"elapsed":544,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"801df0b7-d3ef-4461-8d0b-6e673981217d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["0: WAFER_ID\n","1: PROD_CD\n","2: EQ_ID\n","3: OPER_ID\n","4: RCP_ID\n","5: STEP_NM\n","6: TA_tm_before\n","7: start_dt_tm\n","8: end_dt_tm\n","9: TA_tm_after\n","10: P_Time\n","11: max_val_5\n","12: max_val_6\n","13: max_val_7\n","14: max_val_8\n","15: max_val_9\n","16: max_val_10\n","17: max_val_11\n","18: max_val_12\n","19: max_val_13\n","20: max_val_14\n","21: max_val_15\n","22: max_val_16\n","23: max_val_17\n","24: max_val_18\n","25: max_val_19\n","26: mean_val_5\n","27: mean_val_6\n","28: mean_val_7\n","29: mean_val_8\n","30: mean_val_9\n","31: mean_val_10\n","32: mean_val_11\n","33: mean_val_12\n","34: mean_val_13\n","35: mean_val_14\n","36: mean_val_15\n","37: mean_val_16\n","38: mean_val_17\n","39: mean_val_18\n","40: mean_val_19\n","41: median_val_5\n","42: median_val_6\n","43: median_val_7\n","44: median_val_8\n","45: median_val_9\n","46: median_val_10\n","47: median_val_11\n","48: median_val_12\n","49: median_val_13\n","50: median_val_14\n","51: median_val_15\n","52: median_val_16\n","53: median_val_17\n","54: median_val_18\n","55: median_val_19\n","56: min_val_5\n","57: min_val_6\n","58: min_val_7\n","59: min_val_8\n","60: min_val_9\n","61: min_val_10\n","62: min_val_11\n","63: min_val_12\n","64: min_val_13\n","65: min_val_14\n","66: min_val_15\n","67: min_val_16\n","68: min_val_17\n","69: min_val_18\n","70: min_val_19\n","71: range_val_5\n","72: range_val_6\n","73: range_val_7\n","74: range_val_8\n","75: range_val_9\n","76: range_val_10\n","77: range_val_11\n","78: range_val_12\n","79: range_val_13\n","80: range_val_14\n","81: range_val_15\n","82: range_val_16\n","83: range_val_17\n","84: range_val_18\n","85: range_val_19\n","86: stddev_val_5\n","87: stddev_val_6\n","88: stddev_val_7\n","89: stddev_val_8\n","90: stddev_val_9\n","91: stddev_val_10\n","92: stddev_val_11\n","93: stddev_val_12\n","94: stddev_val_13\n","95: stddev_val_14\n","96: stddev_val_15\n","97: stddev_val_16\n","98: stddev_val_17\n","99: stddev_val_18\n","100: stddev_val_19\n","101: max_val_pca\n","102: min_val_pca\n","103: stddev_val_pca\n","104: mean_val_pca\n","105: range_val_pca\n","106: median_val_pca\n","107: rep_hours\n","108: diff_hours\n","109: step_hours\n","110: last_hours\n","111: Cumulative_Count_TA\n","112: Cumulative_Count_P\n","113: STEP_NM_2\n","114: STEP_NM_8\n","115: STEP_NM_9\n","116: STEP_NM_11\n","117: STEP_NM_17\n","118: STEP_NM_19\n","119: STEP_NM_20\n","120: STEP_NM_21\n","121: STEP_NM_24\n","122: STEP_NM_25\n","123: STEP_NM_26\n","124: STEP_NM_27\n","125: STEP_NM_28\n","126: STEP_NM_34\n","127: STEP_NM_36\n","128: STEP_NM_38\n","       WAFER_ID  PROD_CD  EQ_ID  OPER_ID  RCP_ID  STEP_NM        TA_tm_before  \\\n","0            23        9      1        2      13       36 2022-04-13 10:21:24   \n","1            23        9      1        2      13       38 2022-04-13 10:21:24   \n","2            23        9      1        2      13       34 2022-04-13 10:21:24   \n","3            23        9      1        2      13       26 2022-04-13 10:21:24   \n","4            23        9      1        2      13        2 2022-04-13 10:21:24   \n","...         ...      ...    ...      ...     ...      ...                 ...   \n","48667       137        9      1        1      24       28 2022-07-04 02:23:49   \n","48668       137        9      1        1      24        8 2022-07-04 02:23:49   \n","48669       137        9      1        1      24       27 2022-07-04 02:23:49   \n","48670       137        9      1        1      24       36 2022-07-04 02:23:49   \n","48671       136        9      1        1       7       36 2022-07-04 02:23:49   \n","\n","              start_dt_tm           end_dt_tm         TA_tm_after  ...  \\\n","0     2022-04-15 09:28:38 2022-04-26 21:27:14 2022-04-22 16:38:35  ...   \n","1     2022-04-15 09:28:54 2022-04-26 21:14:05 2022-04-22 16:38:35  ...   \n","2     2022-04-15 09:29:14 2022-04-26 21:14:25 2022-04-22 16:38:35  ...   \n","3     2022-04-15 09:29:34 2022-04-26 21:16:45 2022-04-22 16:38:35  ...   \n","4     2022-04-15 09:31:54 2022-04-26 21:17:08 2022-04-22 16:38:35  ...   \n","...                   ...                 ...                 ...  ...   \n","48667 2022-07-04 04:41:03 2022-07-04 04:42:02 2022-07-16 10:51:27  ...   \n","48668 2022-07-04 04:42:03 2022-07-04 04:42:12 2022-07-16 10:51:27  ...   \n","48669 2022-07-04 04:42:13 2022-07-04 04:42:22 2022-07-16 10:51:27  ...   \n","48670 2022-07-04 04:42:23 2022-07-04 04:42:57 2022-07-16 10:51:27  ...   \n","48671 2022-07-04 04:43:09 2022-07-04 04:49:03 2022-07-16 10:51:27  ...   \n","\n","      STEP_NM_20  STEP_NM_21  STEP_NM_24  STEP_NM_25  STEP_NM_26  STEP_NM_27  \\\n","0            0.0         0.0         0.0         0.0         0.0         0.0   \n","1            0.0         0.0         0.0         0.0         0.0         0.0   \n","2            0.0         0.0         0.0         0.0         0.0         0.0   \n","3            0.0         0.0         0.0         0.0         1.0         0.0   \n","4            0.0         0.0         0.0         0.0         0.0         0.0   \n","...          ...         ...         ...         ...         ...         ...   \n","48667        0.0         0.0         0.0         0.0         0.0         0.0   \n","48668        0.0         0.0         0.0         0.0         0.0         0.0   \n","48669        0.0         0.0         0.0         0.0         0.0         1.0   \n","48670        0.0         0.0         0.0         0.0         0.0         0.0   \n","48671        0.0         0.0         0.0         0.0         0.0         0.0   \n","\n","       STEP_NM_28  STEP_NM_34  STEP_NM_36  STEP_NM_38  \n","0             0.0         0.0         1.0         0.0  \n","1             0.0         0.0         0.0         1.0  \n","2             0.0         1.0         0.0         0.0  \n","3             0.0         0.0         0.0         0.0  \n","4             0.0         0.0         0.0         0.0  \n","...           ...         ...         ...         ...  \n","48667         1.0         0.0         0.0         0.0  \n","48668         0.0         0.0         0.0         0.0  \n","48669         0.0         0.0         0.0         0.0  \n","48670         0.0         0.0         1.0         0.0  \n","48671         0.0         0.0         1.0         0.0  \n","\n","[48672 rows x 129 columns]\n"]}]},{"cell_type":"markdown","source":["**7) TA(fail to fail)기준으로 공정순서 매기기**"],"metadata":{"id":"dszMsONzZK_d"}},{"cell_type":"code","source":["# TA(fail to fail)기준으로 공정순서 매기기\n","for i, group in df.groupby('TA_tm_after'):\n","    sequence = 0\n","    for j, _ in group.iterrows():\n","        df.loc[j, 'sequence'] = sequence\n","        sequence += 1\n","\n","print(df)"],"metadata":{"id":"CQoRcoN5WOFn","executionInfo":{"status":"ok","timestamp":1716860201748,"user_tz":-540,"elapsed":9609,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a38f4523-702d-423b-e8b2-078878f0a8de"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["       WAFER_ID  PROD_CD  EQ_ID  OPER_ID  RCP_ID  STEP_NM        TA_tm_before  \\\n","0            23        9      1        2      13       36 2022-04-13 10:21:24   \n","1            23        9      1        2      13       38 2022-04-13 10:21:24   \n","2            23        9      1        2      13       34 2022-04-13 10:21:24   \n","3            23        9      1        2      13       26 2022-04-13 10:21:24   \n","4            23        9      1        2      13        2 2022-04-13 10:21:24   \n","...         ...      ...    ...      ...     ...      ...                 ...   \n","48667       137        9      1        1      24       28 2022-07-04 02:23:49   \n","48668       137        9      1        1      24        8 2022-07-04 02:23:49   \n","48669       137        9      1        1      24       27 2022-07-04 02:23:49   \n","48670       137        9      1        1      24       36 2022-07-04 02:23:49   \n","48671       136        9      1        1       7       36 2022-07-04 02:23:49   \n","\n","              start_dt_tm           end_dt_tm         TA_tm_after  ...  \\\n","0     2022-04-15 09:28:38 2022-04-26 21:27:14 2022-04-22 16:38:35  ...   \n","1     2022-04-15 09:28:54 2022-04-26 21:14:05 2022-04-22 16:38:35  ...   \n","2     2022-04-15 09:29:14 2022-04-26 21:14:25 2022-04-22 16:38:35  ...   \n","3     2022-04-15 09:29:34 2022-04-26 21:16:45 2022-04-22 16:38:35  ...   \n","4     2022-04-15 09:31:54 2022-04-26 21:17:08 2022-04-22 16:38:35  ...   \n","...                   ...                 ...                 ...  ...   \n","48667 2022-07-04 04:41:03 2022-07-04 04:42:02 2022-07-16 10:51:27  ...   \n","48668 2022-07-04 04:42:03 2022-07-04 04:42:12 2022-07-16 10:51:27  ...   \n","48669 2022-07-04 04:42:13 2022-07-04 04:42:22 2022-07-16 10:51:27  ...   \n","48670 2022-07-04 04:42:23 2022-07-04 04:42:57 2022-07-16 10:51:27  ...   \n","48671 2022-07-04 04:43:09 2022-07-04 04:49:03 2022-07-16 10:51:27  ...   \n","\n","      STEP_NM_21  STEP_NM_24  STEP_NM_25  STEP_NM_26  STEP_NM_27  STEP_NM_28  \\\n","0            0.0         0.0         0.0         0.0         0.0         0.0   \n","1            0.0         0.0         0.0         0.0         0.0         0.0   \n","2            0.0         0.0         0.0         0.0         0.0         0.0   \n","3            0.0         0.0         0.0         1.0         0.0         0.0   \n","4            0.0         0.0         0.0         0.0         0.0         0.0   \n","...          ...         ...         ...         ...         ...         ...   \n","48667        0.0         0.0         0.0         0.0         0.0         1.0   \n","48668        0.0         0.0         0.0         0.0         0.0         0.0   \n","48669        0.0         0.0         0.0         0.0         1.0         0.0   \n","48670        0.0         0.0         0.0         0.0         0.0         0.0   \n","48671        0.0         0.0         0.0         0.0         0.0         0.0   \n","\n","       STEP_NM_34  STEP_NM_36  STEP_NM_38  sequence  \n","0             0.0         1.0         0.0       0.0  \n","1             0.0         0.0         1.0       1.0  \n","2             1.0         0.0         0.0       2.0  \n","3             0.0         0.0         0.0       3.0  \n","4             0.0         0.0         0.0       4.0  \n","...           ...         ...         ...       ...  \n","48667         0.0         0.0         0.0      13.0  \n","48668         0.0         0.0         0.0      14.0  \n","48669         0.0         0.0         0.0      15.0  \n","48670         0.0         1.0         0.0      16.0  \n","48671         0.0         1.0         0.0      17.0  \n","\n","[48672 rows x 130 columns]\n"]}]},{"cell_type":"code","source":["# 각 컬럼의 인덱스와 이름 출력\n","for index, column in enumerate(df.columns):\n","    print(f\"Index {index}: {column}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T2VysRJcL65Q","executionInfo":{"status":"ok","timestamp":1716860201749,"user_tz":-540,"elapsed":20,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}},"outputId":"4fc84094-9e70-478a-eb1a-3752875ed2e7"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Index 0: WAFER_ID\n","Index 1: PROD_CD\n","Index 2: EQ_ID\n","Index 3: OPER_ID\n","Index 4: RCP_ID\n","Index 5: STEP_NM\n","Index 6: TA_tm_before\n","Index 7: start_dt_tm\n","Index 8: end_dt_tm\n","Index 9: TA_tm_after\n","Index 10: P_Time\n","Index 11: max_val_5\n","Index 12: max_val_6\n","Index 13: max_val_7\n","Index 14: max_val_8\n","Index 15: max_val_9\n","Index 16: max_val_10\n","Index 17: max_val_11\n","Index 18: max_val_12\n","Index 19: max_val_13\n","Index 20: max_val_14\n","Index 21: max_val_15\n","Index 22: max_val_16\n","Index 23: max_val_17\n","Index 24: max_val_18\n","Index 25: max_val_19\n","Index 26: mean_val_5\n","Index 27: mean_val_6\n","Index 28: mean_val_7\n","Index 29: mean_val_8\n","Index 30: mean_val_9\n","Index 31: mean_val_10\n","Index 32: mean_val_11\n","Index 33: mean_val_12\n","Index 34: mean_val_13\n","Index 35: mean_val_14\n","Index 36: mean_val_15\n","Index 37: mean_val_16\n","Index 38: mean_val_17\n","Index 39: mean_val_18\n","Index 40: mean_val_19\n","Index 41: median_val_5\n","Index 42: median_val_6\n","Index 43: median_val_7\n","Index 44: median_val_8\n","Index 45: median_val_9\n","Index 46: median_val_10\n","Index 47: median_val_11\n","Index 48: median_val_12\n","Index 49: median_val_13\n","Index 50: median_val_14\n","Index 51: median_val_15\n","Index 52: median_val_16\n","Index 53: median_val_17\n","Index 54: median_val_18\n","Index 55: median_val_19\n","Index 56: min_val_5\n","Index 57: min_val_6\n","Index 58: min_val_7\n","Index 59: min_val_8\n","Index 60: min_val_9\n","Index 61: min_val_10\n","Index 62: min_val_11\n","Index 63: min_val_12\n","Index 64: min_val_13\n","Index 65: min_val_14\n","Index 66: min_val_15\n","Index 67: min_val_16\n","Index 68: min_val_17\n","Index 69: min_val_18\n","Index 70: min_val_19\n","Index 71: range_val_5\n","Index 72: range_val_6\n","Index 73: range_val_7\n","Index 74: range_val_8\n","Index 75: range_val_9\n","Index 76: range_val_10\n","Index 77: range_val_11\n","Index 78: range_val_12\n","Index 79: range_val_13\n","Index 80: range_val_14\n","Index 81: range_val_15\n","Index 82: range_val_16\n","Index 83: range_val_17\n","Index 84: range_val_18\n","Index 85: range_val_19\n","Index 86: stddev_val_5\n","Index 87: stddev_val_6\n","Index 88: stddev_val_7\n","Index 89: stddev_val_8\n","Index 90: stddev_val_9\n","Index 91: stddev_val_10\n","Index 92: stddev_val_11\n","Index 93: stddev_val_12\n","Index 94: stddev_val_13\n","Index 95: stddev_val_14\n","Index 96: stddev_val_15\n","Index 97: stddev_val_16\n","Index 98: stddev_val_17\n","Index 99: stddev_val_18\n","Index 100: stddev_val_19\n","Index 101: max_val_pca\n","Index 102: min_val_pca\n","Index 103: stddev_val_pca\n","Index 104: mean_val_pca\n","Index 105: range_val_pca\n","Index 106: median_val_pca\n","Index 107: rep_hours\n","Index 108: diff_hours\n","Index 109: step_hours\n","Index 110: last_hours\n","Index 111: Cumulative_Count_TA\n","Index 112: Cumulative_Count_P\n","Index 113: STEP_NM_2\n","Index 114: STEP_NM_8\n","Index 115: STEP_NM_9\n","Index 116: STEP_NM_11\n","Index 117: STEP_NM_17\n","Index 118: STEP_NM_19\n","Index 119: STEP_NM_20\n","Index 120: STEP_NM_21\n","Index 121: STEP_NM_24\n","Index 122: STEP_NM_25\n","Index 123: STEP_NM_26\n","Index 124: STEP_NM_27\n","Index 125: STEP_NM_28\n","Index 126: STEP_NM_34\n","Index 127: STEP_NM_36\n","Index 128: STEP_NM_38\n","Index 129: sequence\n"]}]},{"cell_type":"code","source":["# # 재배열된 df를 'final_df_reorder.csv' 파일로 저장\n","# df_ordered.to_csv('df.csv', index=False)\n","\n","# # 성공적으로 저장되었음을 알림\n","# print(\"인코딩 결과가 업데이트된 데이터가 'df.csv' 파일로 저장되었습니다.\")"],"metadata":{"id":"JOjI4q7i6yjy","executionInfo":{"status":"ok","timestamp":1716860201749,"user_tz":-540,"elapsed":18,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# 파일불러오기\n","# import pandas as pd\n","# file_name = '/content/naive.csv' # 파일경로\n","# df = pd.read_csv(file_name)\n","# df"],"metadata":{"id":"woW8wef-heZ3","executionInfo":{"status":"ok","timestamp":1716860201749,"user_tz":-540,"elapsed":18,"user":{"displayName":"Sophia park","userId":"02570661665333631353"}}},"execution_count":14,"outputs":[]}]}